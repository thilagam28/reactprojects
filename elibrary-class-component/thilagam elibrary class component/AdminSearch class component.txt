import './AdminSearch.css';
import {Link} from 'react-router-dom';
import { Component, useEffect,useState } from 'react';
import axios from 'axios';
import { render } from '@testing-library/react';


class AdminSearch extends Component{
  constructor(props){
    super(props);
    this.state={
        getList:{  
        },
        getSearch:{
        },
        getIndex:{
        },
        getBook:{
              bookId:'',
              bookTitle:'',
              bookDesc:'',
              authorName:'',
              noBooks:''
        }       
    }
  }



  onChangeSearchHandler=(event)=>{
    this.state({
    getSearch:{[event.target.name]:event.target.value}
    });
  }
  onChangeSearchHandler=(event)=>{
    this.state({
    getBook:{[event.target.name]:event.target.value}
    });
  }

   //Add book details into table
     useEffect=(()=>{

      axios.get('http://localhost:3000/library').then((response)=>{
        console.log(response.data)
        this.state.getList(response.data);
    }).catch((error)=>{
      console.log(error);
    })
    //         if(JSON.parse(sessionStorage.getItem('bookDetails')) && JSON.parse(sessionStorage.getItem('bookDetails')).length>0){
    //            setList(JSON.parse(sessionStorage.getItem('bookDetails')))
    //         }
     },[])
     //delete item from table when delete icon clicked
     onDeleteHandler=(index)=>{
      let bookDetails = [...this.state.getList];
      let id = bookDetails[index].id;
      axios.delete('http://localhost:3000/library/'+id).then((response)=>{
       bookDetails.splice(index,1);
       this.state.getList(bookDetails);
      }).catch(()=>{

      })
     // sessionStorage.setItem('expenseDetails',JSON.stringify(expenseDetails));
    }
    //edit table item
     onEditHandler=(index)=>{
       this.state({
        getBook:{
          bookName:this.state.getList[index].bookName,
          bookId:this.state.getList[index].bookId,
          bookTitle:this.state.getList[index].bookTitle,
          bookDesc:this.state.getList[index].bookDesc,
          authorName:this.state.getList[index].authorName,
          noBooks:this.state.getList[index].noBooks        
        }
       });
     
      this.state.getIndex(index);
     }
   //search data in the table
      searchFilter=(event)=>{
      event.preventDefault();
      let details = this.state.getList.filter((obj)=>{
        return obj.bookTitle === this.state.getSearch; 
      })
      this.state.getList(details);
    }

     //reset search field
     resetFilter=(event)=>{
        event.preventDefault();
        this.state.getSearch('');
        if(JSON.parse(sessionStorage.getItem('bookDetails')) && JSON.parse(sessionStorage.getItem('bookDetails')).length>0){
          this.state.getList(JSON.parse(sessionStorage.getItem('bookDetails')))
       }
    }



    //Modal dialog field edit submit
     onEditSubmitHandler=(event)=>{
      event.preventDefault();
      let bookDetails =[...this.state.getList];
      let id= bookDetails[this.state.getIndex].id;
      axios.patch('http://localhost:3000/library/'+id,{
        bookId:this.state.getBook.bookId,
        bookTitle:this.state.getBook.bookTitle,
        bookDesc:this.state.getBook.bookDesc,
        authorName:this.state.getBook.authorName,
        noBooks:this.state.getBook.noBooks

      }).then(()=>{
        this.state.getList(bookDetails);
        bookDetails[this.state.getIndex].bookId = this.state.getBook.bookId;
        bookDetails[this.state.getIndex].bookTitle=this.state.getBook.bookTitle;
        bookDetails[this.state.getIndex].bookDesc = this.state.getBook.bookDesc;
        bookDetails[this.state.getIndex].authorName= this.state.getBook.authorName;
        bookDetails[this.state.getIndex].noBooks = this.state.getBook.noBooks;
      }).catch(()=>{

      })
    }
//     // Add book details into table
//      useEffect(()=>{

//       axios.get('http://localhost:3000/library').then((response)=>{
//         console.log(response.data)
//         setList(response.data);
//     }).catch((error)=>{
//       console.log(error);
//     })
//     //         if(JSON.parse(sessionStorage.getItem('bookDetails')) && JSON.parse(sessionStorage.getItem('bookDetails')).length>0){
//     //            setList(JSON.parse(sessionStorage.getItem('bookDetails')))
//     //         }
//      },[])
//      //delete item from table when delete icon clicked
//      const onDeleteHandler=(index)=>{
//       let bookDetails = [...getList];
//       let id = bookDetails[index].id;
//       axios.delete('http://localhost:3000/library/'+id).then((response)=>{
//        bookDetails.splice(index,1);
//        setList(bookDetails);
//       }).catch(()=>{

//       })
//      // sessionStorage.setItem('expenseDetails',JSON.stringify(expenseDetails));
//     }
//     //edit table item
//     const onEditHandler=(index)=>{
//       setBook({
//         bookName:getList[index].bookName,
//         bookId:getList[index].bookId,
//         bookTitle:getList[index].bookTitle,
//         bookDesc:getList[index].bookDesc,
//         authorName:getList[index].authorName,
//         noBooks:getList[index].noBooks        
//       })
//       setIndex(index);
//      }
//    //search data in the table
//      const searchFilter=(event)=>{
//       event.preventDefault();
//       let details = getList.filter((obj)=>{
//         return obj.bookTitle === getSearch; 
//       })
//       setList(details);
//     }

//      //reset search field
//     const resetFilter=(event)=>{
//         event.preventDefault();
//         setSearch('');
//         if(JSON.parse(sessionStorage.getItem('bookDetails')) && JSON.parse(sessionStorage.getItem('bookDetails')).length>0){
//           setList(JSON.parse(sessionStorage.getItem('bookDetails')))
//        }
//     }

 render(){
    return(<div>
        
        <div class="container-fluid">
            <div class="row">
              <div class="col-12">
                  <form>       
                    <div><label><h1>Search Book</h1></label> 
                    <button type="submit" class="btn btn-warning subbutton" style={{marginLeft: 1000}}><Link to="/Addbook">Add Book</Link></button></div> 
                    <div class="form-group row">
                      <label for="booktitle" class="col-sm-2 col-form-label">Book Title:</label>
                      <div class="col-sm-10">
                        <input type="text" onChange={this.onChangeSearchHandler}  name="searchBookName" class="form-control" id="booktitle" style={{width: 500}}/>
                      </div>
                    </div>                           
                      <button type="submit"  onClick={this.searchFilter} class="btn btn-warning subbutton" style={{marginLeft: 200}}>Search</button>
                      <button onClick={this.resetFilter} class="btn btn-warning subbutton">Reset</button>
                      
                    </form>
              </div>                            
            </div>

            <div class="row">
                <div class="col-12">
                  <table class="table table-bordered">
                      <thead>
                        <tr>
                          <th scope="col">Book ID</th>
                          <th scope="col">Book Name</th>
                          <th scope="col">Book Description</th>
                          <th scope="col">Author</th>
                          <th scope="col">Number of books available</th>                         
                          <th scope="col">Edit</th>
                          <th scope="col">Delete</th>
                        </tr>
                      </thead>
                      <tbody>
                            {this.state.getList.map((obj,index)=>{
                            return(<tr key={index}>                          
                            <td>{obj.bookId}</td>
                            <td>{obj.bookTitle}</td>
                            <td>{obj.bookDesc}</td>
                            <td>{obj.authorName}</td>
                            <td>{obj.noBooks}</td>
                            <td><i  onClick={()=>this.state.onEditHandler(index)} data-toggle="modal" data-target="#edit" className="fa fa-pencil-square-o" aria-hidden="true"></i></td>
                            <td><i  onClick={()=>this.state.onDeleteHandler(index)} className="fa fa-trash" aria-hidden="true"></i></td>
                          </tr>)
                            })}                        
                      </tbody>
                    </table>
                </div>
            </div>   
        </div>

        <div className="modal fade" id="edit"  role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div className="modal-dialog" role="document">
              <div className="modal-content">
                <div className="modal-header">
                  <h5 className="modal-title" id="exampleModalLabel">Modal title</h5>
                  <button type="button" className="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div className="modal-body">
                <form>
                      <div className="form-group">
                          <label>Book Id</label>
                          <input type="text"   onChange={this.onChangeHandler} name="bookId" className="form-control" id="bookId"  placeholder="Enter book ID"/>
                        </div>
                        <div className="form-group">
                          <label>Book Name</label>
                          <input   onChange={this.onChangeHandler} type="text" name="bookTitle" className="form-control" id="bookTitle"  placeholder="Enter book Title"/>
                        </div>
                        
                      <div className="form-group">
                        <label>Book bookDesc</label>
                        <input  onChange={this.onChangeHandler} type="text" name="bookDesc" className="form-control" id="bookDesc" placeholder="Enter bookDesc"/>
                      
                      </div>
                      <div className="form-group">
                        <label>Author Name</label>
                        <input  onChange={this.onChangeHandler} type="text"  name="authorName" className="form-control" id="authorName" placeholder="enter author name"/>
                      </div>
                      <div className="form-group">
                        <label>No. of Books available</label>
                        <input  onChange={this.onChangeHandler} type="text"  name="noBooks" className="form-control" id="noBooks" placeholder="enter no. of books available"/>
                      </div>
                  
                      <button data-dismiss="modal" onClick={this.onEditSubmitHandler} type="submit" className="btn btn-success">ADD</button>
                    </form>
        </div>
       
      </div>
    </div>
  </div>
    </div>);
 }
}

export default AdminSearch;